from cryptography import x509
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend

def generate_certificate():
    # Generate a private key
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )

        # Create a self-signed certificate
    subject = issuer = x509.Name([
        x509.NameAttribute(x509.NameOID.COMMON_NAME, u"Your CN"),
    ])

    builder = x509.CertificateBuilder()
    builder = builder.subject_name(subject)
    builder = builder.issuer_name(issuer)
    builder = builder.not_valid_before(datetime.datetime.utcnow())
    builder = builder.not_valid_after(datetime.datetime.utcnow() + datetime.timedelta(days=365))
    builder = builder.serial_number(x509.random_serial_number())

    certificate = builder.sign(
        private_key=private_key, 
        algorithm=hashes.SHA256(),
        backend=default_backend()
    )

    with open("private_key.pem", "wb") as key_file:
        key_file.write(private_key.private_bytes( 
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.TraditionalOpenSSL, 
            encryption_algorithm=serialization.NoEncryption()

        ))

    with open("certificate.pem", "wb") as cert_file:
        cert_file.write(certificate.public_bytes(serialization.Encoding.PEM))

    return private_key, certificate

def verify_signature(cert_data, data, signature):
    try:
        cert = x509.load_pem_x509_certificate(cert_data, default_backend())
        cert.public_key().verify(
            signature,
            data,
            padding.PKCS1v15(),
            hashes.SHA256()
        )
        return True
    except Exception as e:
        return False, str(e)
    
def main():
    private_key, certificate = generate_certificate()

    fake_data = b"Fake data"
    fake_signature = b"Fake signature"