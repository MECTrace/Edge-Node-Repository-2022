import hashlib
import os
import shutil

def calculate_hash(file_path):
    hasher = hashlib.sha256()  # 해시 알고리즘 선택 (SHA-256 사용)
    with open(file_path, 'rb') as file:
        while True:
            data = file.read(8192)  # 파일을 8192바이트씩 읽음
            if not data:
                break
            hasher.update(data)
    return hasher.hexdigest()  # 해시값 리턴

def verify_integrity(source_directory, backup_directory, hash_directory):
    """무결성을 검증하고 변경된 파일을 복구하는 함수"""
    for root, dirs, files in os.walk(source_directory):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            
            # 원본 파일의 백업된 파일 경로
            backup_path = os.path.join(backup_directory, file_name) + ".backup"
            hash_file_path = os.path.join(hash_directory, file_name) + ".hash"

            if not os.path.exists(backup_path) or not os.path.exists(hash_file_path):
                continue

            # 원본 파일의 저장된 해시값 불러오기
            with open(hash_file_path, 'r') as hash_file:
                stored_hash = hash_file.read().strip()  # 저장된 해시값

            # 원본 파일의 현재 해시값 계산
            current_hash = calculate_hash(file_path)  # 현재 원본 파일의 해시값